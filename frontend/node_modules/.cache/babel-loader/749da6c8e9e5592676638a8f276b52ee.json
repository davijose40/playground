{"ast":null,"code":"import auth0 from 'auth0-js';\n\nclass Auth {\n  constructor() {\n    this.auth0 = new auth0.WebAuth({\n      // the following three lines MUST be updated\n      domain: 'davijose40.auth0.com',\n      audience: 'https://davijose40.auth0.com/userinfo',\n      clientID: 'o18gXrvMrNC9m8UT0rssUQurPT5kHbI5',\n      redirectUri: 'http://localhost:3000/callback',\n      responseType: 'id_token',\n      scope: 'openid profile'\n    });\n    this.getProfile = this.getProfile.bind(this);\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n    this.isAuthenticated = this.isAuthenticated.bind(this);\n    this.signIn = this.signIn.bind(this);\n    this.signOut = this.signOut.bind(this);\n  }\n\n  getProfile() {\n    console.log(this.getProfile());\n    return this.getProfile;\n  }\n\n  getIdToken() {\n    return this.getIdToken;\n  }\n\n  isAuthenticated() {\n    return new Date().getTime() < this.expiresAt;\n  }\n\n  signIn() {\n    this.auth0.authorize();\n  }\n\n  handleAuthentication() {\n    return new Promise((resolve, reject) => {\n      this.auth0.parseHash((err, authResult) => {\n        if (err) return reject(err);\n\n        if (!authResult || !authResult.idToken) {\n          return reject(err);\n        }\n\n        this.idToken = authResult.idToken;\n        this.profile = authResult.idTokenPayload; // set the time that id token will expire at\n\n        this.expiresAt = authResult.idTokenPayload.exp * 1000;\n        resolve();\n      });\n    });\n  }\n\n  signOut() {\n    // clear id token, profile and expiration\n    this.idToken = null;\n    this.profile = null;\n    this.expiresAt = null;\n  }\n\n}\n\nconst auth0Client = new Auth();\nexport default auth0Client;","map":{"version":3,"sources":["/home/davijose/projects/pairprogramming/qa-app/frontend/src/Auth.js"],"names":["auth0","Auth","constructor","WebAuth","domain","audience","clientID","redirectUri","responseType","scope","getProfile","bind","handleAuthentication","isAuthenticated","signIn","signOut","console","log","getIdToken","Date","getTime","expiresAt","authorize","Promise","resolve","reject","parseHash","err","authResult","idToken","profile","idTokenPayload","exp","auth0Client"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;;AAEA,MAAMC,IAAN,CAAW;AACTC,EAAAA,WAAW,GAAG;AACZ,SAAKF,KAAL,GAAa,IAAIA,KAAK,CAACG,OAAV,CAAkB;AAC7B;AACAC,MAAAA,MAAM,EAAE,sBAFqB;AAG7BC,MAAAA,QAAQ,EAAE,uCAHmB;AAI7BC,MAAAA,QAAQ,EAAE,kCAJmB;AAK7BC,MAAAA,WAAW,EAAE,gCALgB;AAM7BC,MAAAA,YAAY,EAAE,UANe;AAO7BC,MAAAA,KAAK,EAAE;AAPsB,KAAlB,CAAb;AAUA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKC,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BD,IAA1B,CAA+B,IAA/B,CAA5B;AACA,SAAKE,eAAL,GAAuB,KAAKA,eAAL,CAAqBF,IAArB,CAA0B,IAA1B,CAAvB;AACA,SAAKG,MAAL,GAAc,KAAKA,MAAL,CAAYH,IAAZ,CAAiB,IAAjB,CAAd;AACA,SAAKI,OAAL,GAAe,KAAKA,OAAL,CAAaJ,IAAb,CAAkB,IAAlB,CAAf;AACD;;AAEDD,EAAAA,UAAU,GAAG;AACXM,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKP,UAAL,EAAZ;AACA,WAAO,KAAKA,UAAZ;AACD;;AAEDQ,EAAAA,UAAU,GAAG;AACX,WAAO,KAAKA,UAAZ;AACD;;AAEDL,EAAAA,eAAe,GAAG;AAChB,WAAO,IAAIM,IAAJ,GAAWC,OAAX,KAAuB,KAAKC,SAAnC;AACD;;AAEDP,EAAAA,MAAM,GAAG;AACP,SAAKd,KAAL,CAAWsB,SAAX;AACD;;AAEDV,EAAAA,oBAAoB,GAAG;AACrB,WAAO,IAAIW,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,WAAKzB,KAAL,CAAW0B,SAAX,CAAqB,CAACC,GAAD,EAAMC,UAAN,KAAqB;AACxC,YAAID,GAAJ,EAAS,OAAOF,MAAM,CAACE,GAAD,CAAb;;AACT,YAAI,CAACC,UAAD,IAAe,CAACA,UAAU,CAACC,OAA/B,EAAwC;AACtC,iBAAOJ,MAAM,CAACE,GAAD,CAAb;AACD;;AAED,aAAKE,OAAL,GAAeD,UAAU,CAACC,OAA1B;AACA,aAAKC,OAAL,GAAeF,UAAU,CAACG,cAA1B,CAPwC,CAQxC;;AACA,aAAKV,SAAL,GAAiBO,UAAU,CAACG,cAAX,CAA0BC,GAA1B,GAAgC,IAAjD;AACAR,QAAAA,OAAO;AACR,OAXD;AAYD,KAbM,CAAP;AAcD;;AAEDT,EAAAA,OAAO,GAAG;AACR;AACA,SAAKc,OAAL,GAAe,IAAf;AACA,SAAKC,OAAL,GAAe,IAAf;AACA,SAAKT,SAAL,GAAiB,IAAjB;AACD;;AA1DQ;;AA6DX,MAAMY,WAAW,GAAG,IAAIhC,IAAJ,EAApB;AAEA,eAAegC,WAAf","sourcesContent":["import auth0 from 'auth0-js';\n\nclass Auth {\n  constructor() {\n    this.auth0 = new auth0.WebAuth({\n      // the following three lines MUST be updated\n      domain: 'davijose40.auth0.com',\n      audience: 'https://davijose40.auth0.com/userinfo',\n      clientID: 'o18gXrvMrNC9m8UT0rssUQurPT5kHbI5',\n      redirectUri: 'http://localhost:3000/callback',\n      responseType: 'id_token',\n      scope: 'openid profile',\n    });\n\n    this.getProfile = this.getProfile.bind(this);\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n    this.isAuthenticated = this.isAuthenticated.bind(this);\n    this.signIn = this.signIn.bind(this);\n    this.signOut = this.signOut.bind(this);\n  }\n\n  getProfile() {\n    console.log(this.getProfile());\n    return this.getProfile;\n  }\n\n  getIdToken() {\n    return this.getIdToken;\n  }\n\n  isAuthenticated() {\n    return new Date().getTime() < this.expiresAt;\n  }\n\n  signIn() {\n    this.auth0.authorize();\n  }\n\n  handleAuthentication() {\n    return new Promise((resolve, reject) => {\n      this.auth0.parseHash((err, authResult) => {\n        if (err) return reject(err);\n        if (!authResult || !authResult.idToken) {\n          return reject(err);\n        }\n\n        this.idToken = authResult.idToken;\n        this.profile = authResult.idTokenPayload;\n        // set the time that id token will expire at\n        this.expiresAt = authResult.idTokenPayload.exp * 1000;\n        resolve();\n      });\n    })\n  }\n\n  signOut() {\n    // clear id token, profile and expiration\n    this.idToken = null;\n    this.profile = null;\n    this.expiresAt = null;\n  }\n}\n\nconst auth0Client = new Auth();\n\nexport default auth0Client;\n"]},"metadata":{},"sourceType":"module"}